package Helpers;

import Buffer.InputBuffer;
import Enums.PrepareResult;
import Enums.StatementType;

// Strategy Interface
interface StatementStrategy {
    PrepareResult execute();
}

// Concrete Strategies
class SelectStatement implements StatementStrategy {
    @Override
    public PrepareResult execute() {
        System.out.print("Select");
        return PrepareResult.SUCCESS;
    }
}

class InsertStatement implements StatementStrategy {
    @Override
    public PrepareResult execute() {
        System.out.print("INSERT");
        return PrepareResult.SUCCESS;
    }
}

class UpdateStatement implements StatementStrategy {
    @Override
    public PrepareResult execute() {
        System.out.print("UPDATE");
        return PrepareResult.SUCCESS;
    }
}

class DeleteStatement implements StatementStrategy {
    @Override
    public PrepareResult execute() {
        System.out.print("DELETE");
        return PrepareResult.SUCCESS;
    }
}

// Context Class
public class StatementHandler {
    public static PrepareResult prepareStatement(String input, InputBuffer inputBuffer) {
        StatementStrategy strategy = getStatementStrategy(input);
        return strategy.execute();
    }

    private static StatementStrategy getStatementStrategy(String input) {
        if (input == null || input.isEmpty()) {
            return () -> PrepareResult.UNRECOGNIZED_COMMAND;
        }

        String upperInput = input.toUpperCase();

        if (upperInput.startsWith("SELECT")) {
            return new SelectStatement();
        } else if (upperInput.startsWith("INSERT")) {
            return new InsertStatement();
        } else if (upperInput.startsWith("UPDATE")) {
            return new UpdateStatement();
        } else if (upperInput.startsWith("DELETE")) {
            return new DeleteStatement();
        }

        return () -> PrepareResult.UNRECOGNIZED_COMMAND;
    }
}
